#!/usr/bin/env python3

from sys import stdin, stdout
from argparse import ArgumentParser, ArgumentTypeError
from socket import socket, SHUT_WR
from threading import Thread


def address(spec):
    error = ArgumentTypeError(f'must be "port", ":port" or "host:port", not "{spec}"')
    try:
        return 'localhost', int(spec)
    except ValueError:
        pass
    if ':' not in spec:
        raise error
    host, port = spec.rsplit(':', maxsplit=1)
    if host == '':
        host = 'localhost'
    try:
        return host, int(port)
    except ValueError:
        raise error


parser = ArgumentParser()
parser.add_argument(
    'address', type=address,
    help='address to listen on'
)
parser.add_argument(
    '--buffer-size', '-b', type=int, default=4096,
    help='how much data to process at a time'
)
args = parser.parse_args()


def read(sock):
    while (piece := sock.recv(args.buffer_size)):
        stdout.buffer.write(piece)
        stdout.buffer.flush()


def write(sock):
    while (piece := stdin.buffer.read(args.buffer_size)):
        sock.send(piece)
    sock.shutdown(SHUT_WR)


try:
    with socket() as sock:
        sock.connect(args.address)
        thread = Thread(target=write, args=(sock,))
        thread.start()
        read(sock)
        thread.join()
except KeyboardInterrupt:
    pass
