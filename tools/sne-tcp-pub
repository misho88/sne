#!/usr/bin/env python3

from argparse import ArgumentParser
from sys import stdin, stderr
from socketserver import ThreadingTCPServer, BaseRequestHandler
from socket import SOL_SOCKET, SO_REUSEADDR
from threading import Thread, Lock
from queue import SimpleQueue
from time import sleep

parser = ArgumentParser()
parser.add_argument(
    '--host', '--listen', '-l', default='0.0.0.0',
    help='address to listen on'
)
parser.add_argument(
    '--port', '-p', type=int, required=True,
    help='port to listen on'
)
parser.add_argument(
    '--buffer-size', '-b', type=int, default=4096,
    help='how much data to process at a time'
)
parser.add_argument(
    '--subscribers', '--subs' '-s', type=int, default=0,
    help='wait for at least this many subscribers before publishing '
         '(useful for broadcasting a file or something)'
)
parser.add_argument(
    '--verbose', '-v', action='store_true',
    help='print debugging information (on stderr)'
)
args = parser.parse_args()


buf = bytearray(args.buffer_size)
size = -1

queues = {}


if args.verbose:
    def debug(*args, **kwargs):
        with debug.lock:
            print(*args, file=stderr, flush=True, **kwargs)
    debug.lock = Lock()  # noqa: E305
else:
    def debug(*args, **kwargs):
        pass


def update(*args, **kwargs):
    with update.lock:
        print(*args, flush=True, **kwargs)  # flush is only forced on NL if stdout is a TTY
update.lock = Lock()  # noqa: E305


def await_goodbye(request, queue):
    request.recv(1)
    queue.put(0)


def handle(request):
    name = host, port = request.getpeername()
    debug(f'connected: {host}:{port}')
    qi, qo = SimpleQueue(), SimpleQueue()
    queues[name] = qi, qo
    Thread(target=await_goodbye, args=(request, qi)).start()
    update(len(queues))
    try:
        while qi.get():
            request.send(buf[:size])
            qo.put(1)
    except BrokenPipeError:
        pass
    finally:
        del queues[name]
        debug(f'disconnected: {host}:{port}')
        update(len(queues))


class Handler(BaseRequestHandler):
    def handle(self):
        handle(self.request)


try:
    server = ThreadingTCPServer((args.host, args.port), Handler, bind_and_activate=False)
    server.socket.setsockopt(SOL_SOCKET, SO_REUSEADDR, 1)
    server.server_bind()
    server.server_activate()
    server_thread = Thread(target=server.serve_forever)
    server_thread.start()
    update(len(queues))
    while size:
        while len(queues) < args.subscribers:
            sleep(0.05)
        size = stdin.buffer.readinto1(buf)
        for qo, qi in queues.values():
            qo.put(1)
        for qo, qi in queues.values():
            qi.get()
    for qo, qi in queues.values():
        qo.put(0)
except KeyboardInterrupt:
    pass
finally:
    server.shutdown()
    server_thread.join()
    server.server_close()
